# -- Opening file examples/template1.aq21
# -- Done Parsing
# -- Number of Events: 4
# -- Number of Testing Events: 0
# Creating file 
# -- Output Generated by AQ21
Description
{

definition_filename = examples/template1.aq21


Template for learning problem. Please comment out not needed parts of the
file by using # and/or (# #).

}

(#  -- Debugging information 

The following information are required when submitting a bug.
They specify which version of the program was used.

$Id: aq21.cpp,v 1.9 2004/10/21 17:15:03 jwojt Exp $
$Id: AqLearner.cpp,v 1.22 2004/12/01 16:46:57 jwojt Exp $
$Id: BasicComplex.cpp,v 1.16 2004/12/01 16:46:57 jwojt Exp $
$Id: LEF.cpp,v 1.1.1.1 2003/06/18 21:07:23 jwojt Exp $
$Id: LEFCriterion.cpp,v 1.4 2004/10/05 20:59:04 jwojt Exp $
$Id: Domain.cpp,v 1.8 2004/11/29 21:56:10 jwojt Exp $
$Id: Attribute.cpp,v 1.8 2004/06/30 20:32:12 jwojt Exp $
$Id: Tests.cpp,v 1.13 2004/10/08 20:55:01 jwojt Exp $
$Id: CI.cpp,v 1.6 2004/10/21 17:15:03 jwojt Exp $

#)

domains
{
	class nominal  { c1, c2 }
	color nominal  { red, green, blue }
	length continuous 0, 200
	number linear  { 0, 1, 2 }
}


attributes
{
	background color epsilon = 0.5 cost = 1
	number number epsilon = 0.5 cost = 1
	length length epsilon = 0.5 cost = 1
	class class epsilon = 0.5 cost = 1
}


runs
{
 random_seed = 975313573

   Run_All_in_PD
   {
     consequent = [ class = *]
     learn_rules_mode = standard

     maxstar = 1     maxrule = 1     ambiguity = IncludeInPos
     trim = Optimal
     exceptions = false

     mode                 = pd
     minimum_q_percentage = 0.5
     w                    = 0.5
     rule_improvement_np_coverage_percentage = 0.05
     rule_improvement_np_coverage_probe      = 10
     negatives_percentage                    = 0.8

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxQ, 0.3  
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositivesQ, 0  
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxQ, 0  
     }

   }

   Run_Multi-head
   {
     consequent = [length<=40] [class=c1] 
     learn_rules_mode = standard

     maxstar = 1     maxrule = 1     ambiguity = IncludeInPos
     trim = Optimal
     exceptions = false

     mode                 = pd
     minimum_q_percentage = 0.5
     w                    = 0.5
     rule_improvement_np_coverage_percentage = 0.05
     rule_improvement_np_coverage_probe      = 10
     negatives_percentage                    = 0.8

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxQ, 0.3  
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositivesQ, 0  
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxQ, 0  
     }

   }

   Run_c1
   {
     consequent = [class=c1] 
     learn_rules_mode = standard

     maxstar = 1     maxrule = 10     ambiguity = IncludeInPos
     trim = Optimal
     exceptions = false

     mode = tf
     minimum_u = 1

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = true
     max_alternatives = 10
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxPositives, 0  
     }

   }

   Run_c2
   {
     consequent = [class=c2] 
     learn_rules_mode = standard

     maxstar = 1     maxrule = 1     ambiguity = IncludeInPos
     trim = Optimal
     exceptions = false

     mode = tf
     minimum_u = 1

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxPositives, 0  
     }

   }

}


Output_Hypotheses Run_All_in_PD_000
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 1
  # -- Complexity for this cover    = 7
  # -- Average number of rules kept from each stars = 1
  # -- Uncovered Positives = 0

  positive_events           = 2
  negative_events           = 2
[class=c1] 
       # Rule 1
   <-- [number=1 : 2,0,100%,2,0,100%]
        : p=2,n=0,q=1,cx=7,s=2 # 9


}

Output_Hypotheses Run_All_in_PD_001
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 1
  # -- Complexity for this cover    = 7
  # -- Average number of rules kept from each stars = 1
  # -- Uncovered Positives = 0

  positive_events           = 2
  negative_events           = 2
[class=c2] 
       # Rule 1
   <-- [number=0 : 2,0,100%,2,0,100%]
        : p=2,n=0,q=1,cx=7,s=2 # 24


}

Output_Hypotheses Run_Multi-head
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 1
  # -- Complexity for this cover    = 7
  # -- Average number of rules kept from each stars = 1
  # -- Uncovered Positives = 0

  positive_events           = 2
  negative_events           = 2
[length<=40] [class=c1] 
       # Rule 1
   <-- [number=1 : 2,0,100%,2,0,100%]
        : p=2,n=0,q=1,cx=7,s=2 # 38


}

Output_Hypotheses Run_c1
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 1
  # -- Complexity for this cover    = 7
  # -- Average number of rules kept from each stars = 1
  # -- Uncovered Positives = 0

  positive_events           = 2
  negative_events           = 2
[class=c1] 
       # Rule 1
   <-- [number=1 : 2,0,100%,2,0,100%]
        : p=2,np=2,enp=2,n=0,en=0,u=2,cx=7,c=1,s=2 # 48


}

Output_Hypotheses Run_c2
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 1
  # -- Complexity for this cover    = 7
  # -- Average number of rules kept from each stars = 1
  # -- Uncovered Positives = 0

  positive_events           = 2
  negative_events           = 2
[class=c2] 
       # Rule 1
   <-- [number=0 : 2,0,100%,2,0,100%]
        : p=2,np=2,enp=2,n=0,en=0,u=2,cx=7,c=1,s=2 # 53


}

