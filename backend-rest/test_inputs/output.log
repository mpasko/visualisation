# -- Opening file input.aq21
# -- Done Parsing
# -- Number of Events: 6
# -- Number of Testing Events: 0
# Creating file 
# -- Output Generated by AQ21
Description
{

definition_filename = input.aq21

}

(#  -- Debugging information 

The following information are required when submitting a bug.
They specify which version of the program was used.

$Id: aq21.cpp,v 1.9 2004/10/21 17:15:03 jwojt Exp $
$Id: AqLearner.cpp,v 1.22 2004/12/01 16:46:57 jwojt Exp $
$Id: BasicComplex.cpp,v 1.16 2004/12/01 16:46:57 jwojt Exp $
$Id: LEF.cpp,v 1.1.1.1 2003/06/18 21:07:23 jwojt Exp $
$Id: LEFCriterion.cpp,v 1.4 2004/10/05 20:59:04 jwojt Exp $
$Id: Domain.cpp,v 1.8 2004/11/29 21:56:10 jwojt Exp $
$Id: Attribute.cpp,v 1.8 2004/06/30 20:32:12 jwojt Exp $
$Id: Tests.cpp,v 1.13 2004/10/08 20:55:01 jwojt Exp $
$Id: CI.cpp,v 1.6 2004/10/21 17:15:03 jwojt Exp $

#)

domains
{
	c nominal  { 1, 2, 3 }
	color nominal  { r, y, b, g, w }
	shape linear  { r, s, t }
	x6 continuous 
}


attributes
{
	x1 shape epsilon = 0.5 cost = 1
	x2 shape epsilon = 0.5 cost = 1
	x3 shape epsilon = 0.5 cost = 1
	x4 color epsilon = 0.5 cost = 1
	x5 color epsilon = 0.5 cost = 1
	x6 x6 epsilon = 0.5 cost = 1
	c c epsilon = 0.5 cost = 1
}


runs
{
 random_seed = 975313573

   default
   {
     consequent = [c=1] 
     learn_rules_mode = standard

     maxstar = 2     maxrule = 5     ambiguity = IncludeInPos
     trim = Optimal
     exceptions = false

     mode = tf
     minimum_u = 1

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxPositives, 0  
     }

   }

   mostgen
   {
     consequent = [c=1] 
     learn_rules_mode = standard

     maxstar = 2     maxrule = 5     ambiguity = IncludeInPos
     trim = MostGen
     exceptions = false

     mode = tf
     minimum_u = 1

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxPositives, 0  
     }

   }

   mostspec
   {
     consequent = [c=1] 
     learn_rules_mode = standard

     maxstar = 2     maxrule = 5     ambiguity = IncludeInPos
     trim = MostSpec
     exceptions = false

     mode = tf
     minimum_u = 1

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxPositives, 0  
     }

   }

   optimal
   {
     consequent = [c=1] 
     learn_rules_mode = standard

     maxstar = 2     maxrule = 5     ambiguity = IncludeInPos
     trim = Optimal
     exceptions = false

     mode = tf
     minimum_u = 1

     optimize_ruleset = true
     continuous_optimization_probe = 5

     truncate = true
     display_selectors_coverage = true
     display_values_coverage = false
     display_events_covered = false
     display_alternative_covers = false
   attribute_selection_method = none
     handling_unknown_values = program_selected_method

     LEF_star
     {
         MaxNewPositives, 0.3  
         MinNumSelectors, 0.3  
         MinComplexity, 0.3  
         MinCost, 0.3  
     }

     LEF_partial_star
     {
         MaxNewPositives, 0  
         MinNumSelectors, 0  
         MinComplexity, 0  
         MinCost, 0  
     }

     LEF_sort
     {         
         MaxPositives, 0  
     }

   }

}


Output_Hypotheses default
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 2
  # -- Complexity for this cover    = 12
  # -- Average number of rules kept from each stars = 5
  # -- Uncovered Positives = 0

  positive_events           = 4
  negative_events           = 2
[c=1] 
       # Rule 1
   <-- [x1=s : 4,1,80%,4,1,80%]
       [x6>=-0.3499 : 4,1,80%,4,0,100%]
        : p=4,np=4,u=4,cx=12,c=1,s=4 # 28


}

Output_Hypotheses mostgen
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 2
  # -- Complexity for this cover    = 12
  # -- Average number of rules kept from each stars = 2
  # -- Uncovered Positives = 0

  positive_events           = 4
  negative_events           = 2
[c=1] 
       # Rule 1
   <-- [x1=s..t : 4,1,80%,4,1,80%]
       [x6>=-0.6999 : 4,1,80%,4,0,100%]
        : p=4,np=4,u=4,cx=12,c=1,s=4 # 60


}

Output_Hypotheses mostspec
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 5
  # -- Complexity for this cover    = 39
  # -- Average number of rules kept from each stars = 3
  # -- Uncovered Positives = 0

  positive_events           = 4
  negative_events           = 2
[c=1] 
       # Rule 1
   <-- [x1=s : 4,1,80%,4,1,80%]
       [x2=s..t : 4,2,66%,4,1,80%]
       [x4=r,g : 4,2,66%,4,1,80%]
       [x5=r,b : 4,1,80%,4,1,80%]
       [x6=0..2 : 4,1,80%,4,0,100%]
        : p=4,np=4,u=4,cx=39,c=1,s=4 # 87


}

Output_Hypotheses optimal
{
  # -- This learning took = 
  # -- System (CPU) time  = 0
  # -- User (Total) time  = 0
  # -- Number of rules in the cover = 1
  # -- Number of conditions         = 2
  # -- Complexity for this cover    = 14
  # -- Average number of rules kept from each stars = 3
  # -- Uncovered Positives = 0

  positive_events           = 4
  negative_events           = 2
[c=1] 
       # Rule 1
   <-- [x5=r,b : 4,1,80%,4,1,80%]
       [x6>=-0.3499 : 4,1,80%,4,0,100%]
        : p=4,np=4,u=4,cx=14,c=1,s=4 # 116


}
